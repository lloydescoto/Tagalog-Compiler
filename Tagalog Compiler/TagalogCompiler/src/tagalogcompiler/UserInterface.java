/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tagalogcompiler;
import java.io.FileNotFoundException;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import Lexical.Lexer;
import Lexical.Token;
import Lexical.TokenType;
import Semantic.CodeGeneration;
import Semantic.ErrorType;
import Semantic.SemanticAnalyzer;
import Syntax.Parser;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.tools.DiagnosticCollector;
import javax.tools.JavaCompiler;
import javax.tools.JavaFileObject;
import javax.tools.StandardJavaFileManager;
import javax.tools.ToolProvider;
/**
 *
 * @author Richard
 */
public class UserInterface extends javax.swing.JFrame {
     static String FileLocation = "";
     File file;
     FileReader readFile;
     File fileToSave;
     SemanticAnalyzer semantic;
    /**
     * Creates new form UserInterface
     */
    public UserInterface() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAreaInput = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbxOutput = new javax.swing.JTextArea();
        bttnOpenFile = new javax.swing.JButton();
        bttnSaveFile = new javax.swing.JButton();
        runBttn = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtAreaInput.setColumns(20);
        txtAreaInput.setRows(5);
        jScrollPane1.setViewportView(txtAreaInput);

        tbxOutput.setColumns(20);
        tbxOutput.setRows(5);
        jScrollPane2.setViewportView(tbxOutput);

        bttnOpenFile.setText("Open File");
        bttnOpenFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnOpenFileActionPerformed(evt);
            }
        });

        bttnSaveFile.setText("Save File");
        bttnSaveFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnSaveFileActionPerformed(evt);
            }
        });

        runBttn.setText("Run");
        runBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runBttnActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(153, 153, 153));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Output :");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addContainerGap(233, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addContainerGap())
        );

        jPanel2.setBackground(new java.awt.Color(153, 153, 153));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Source Code :");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBackground(new java.awt.Color(102, 102, 255));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel3.setText("TAGALOG COMPILER");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addContainerGap())
        );

        jPanel5.setBackground(new java.awt.Color(102, 102, 102));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 9, Short.MAX_VALUE)
        );

        jPanel6.setBackground(new java.awt.Color(102, 102, 102));

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bttnOpenFile, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
                            .addComponent(bttnSaveFile, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
                            .addComponent(runBttn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 411, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bttnOpenFile, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bttnSaveFile, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(runBttn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void output() throws IOException
    {
        FileReader fileRead;
         try 
         {
            fileRead = new FileReader(new File(fileToSave.getPath()));
            semantic = new SemanticAnalyzer(fileRead);
            if(semantic.analyzeProgam())
            {
                if(semantic.errors.isEmpty())
                {
                    generateCode();
                    JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
                    DiagnosticCollector<JavaFileObject> diagnostics = new DiagnosticCollector<JavaFileObject>();
                    StandardJavaFileManager fileManager = compiler.getStandardFileManager(diagnostics, null, null);
                    Iterable<? extends JavaFileObject> compilationUnits = fileManager.getJavaFileObjectsFromStrings(Arrays.asList(fileToSave.toString().replace("C:\\Users\\WIN\\Desktop\\TagalogCompilerWithUI\\TagalogCompiler\\","").replace(".txt",".java")));
                    JavaCompiler.CompilationTask task = compiler.getTask(null, fileManager, diagnostics, null,
                            null, compilationUnits);
                    boolean success = task.call();
                    fileManager.close();
                    if(success)
                    {
                        Runtime.getRuntime().exec("cmd /c start cmd.exe /K java " + fileToSave.toString().replace("C:\\Users\\WIN\\Desktop\\TagalogCompilerWithUI\\TagalogCompiler\\","").replace(".txt",""));
                    }
                    else
                    {
                       tbxOutput.append("Compilation Failed");
                    }
                }
                else
                {
                    for(int x = 0;x < semantic.errors.size();x++)
                    {
                        if(semantic.errors.get(x) == ErrorType.MULTIPLE_DECLARATION)
                        {
                            tbxOutput.append("Semantic Error : Already Declare" + 
                                    " " + semantic.variableDeclaration.get(semantic.errorsLine.get(x)).identifierValue.identifierValue.getStringVal());
                            tbxOutput.append("\n");
                        }
                        if(semantic.errors.get(x) == ErrorType.OUT_OF_SCOPE)
                        {
                            tbxOutput.append("Semantic Error : Out of Scope" + 
                                    " " + semantic.identifiers.get(semantic.errorsLine.get(x)).identifierValue.getStringVal());
                            tbxOutput.append("\n");
                        }
                        if(semantic.errors.get(x) == ErrorType.TYPE_MISMATCH)
                        {
                            tbxOutput.append("Semantic Error : Type Mismatch" + 
                                    " " + semantic.assignments.get(semantic.errorsLine.get(x)).variable.identifierValue.identifierValue.getStringVal());
                            tbxOutput.append("\n");
                        }
                        if(semantic.errors.get(x) == ErrorType.UNDECLARE_VARIABLE)
                        {
                            tbxOutput.append("Semantic Error : Undeclare Variable" + 
                                    " " + semantic.identifiers.get(semantic.errorsLine.get(x)).identifierValue.getStringVal());
                            tbxOutput.append("\n");
                        }
                    }
                }
            }
            else
            {
                tbxOutput.append(semantic.error);
            }
         } catch (FileNotFoundException ex) {
             Logger.getLogger(UserInterface.class.getName()).log(Level.SEVERE, null, ex);
         } 
    }
     
    
    private void generateCode()
    {
        try( PrintWriter out = new PrintWriter(fileToSave.toString().replace(".txt",".java"))  )
            {
                CodeGeneration code = new CodeGeneration();
                int lineNumber = 1;
                out.println("import java.util.*;");
                out.println("public class " + fileToSave.toString().replace("C:\\Users\\WIN\\Desktop\\TagalogCompilerWithUI\\TagalogCompiler\\","").replace(".txt",""));
                out.println("{");
                for(int x = 0;x < semantic.tokens.size();x++)
                {
                    if(semantic.tokens.get(x).lineNumber != lineNumber)
                    {
                        out.println("");
                        lineNumber = semantic.tokens.get(x).lineNumber;
                    }
                    if(semantic.tokens.get(x).getType() == TokenType.PANGUNAHING)
                    {
                        out.println(code.getEquivalentCode(semantic.tokens.get(x)));
                        out.println("Scanner input = new Scanner(System.in);");
                        x += 4;
                    }
                    if(semantic.tokens.get(x).getType() == TokenType.IPAKITA)
                    {
                        out.print("System.out.println(");
                        x++;
                        while(semantic.tokens.get(x).type != TokenType.TERMINATOR)
                        {  
                            out.print(code.getEquivalentCode(semantic.tokens.get(x)).toString());
                            x++;
                        }
                        out.print(")");
                    }
                    if(semantic.tokens.get(x).getType() == TokenType.IPASOK)
                    {
                        TokenType type = null;
                        for(int y = 0;y < semantic.variableDeclaration.size();y++)
                        {
                            if(semantic.variableDeclaration.get(y).identifierValue.identifierValue.getStringVal().equals(semantic.tokens.get(x+1).value.getStringVal().replace("\\s+","")))
                            {
                                type = semantic.variableDeclaration.get(y).getType();
                            }
                        }
                        if(type == TokenType.BUUMBILANG)
                        {
                            out.print(code.getEquivalentCode(semantic.tokens.get(x+1)) + " = input.nextInt()");
                        }
                        if(type == TokenType.SALITA)
                        {
                            out.print(code.getEquivalentCode(semantic.tokens.get(x+1)) + " = input.nextLine()");
                        }
                        if(type == TokenType.DESIMAL)
                        {
                            out.print(code.getEquivalentCode(semantic.tokens.get(x+1)) + " = input.nextFloat()");
                        }
                        x += 2;
                    }
                    out.print(code.getEquivalentCode(semantic.tokens.get(x)) + " ");
                }
                out.println("}");
            } catch (FileNotFoundException ex) 
            {
                  Logger.getLogger(UserInterface.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
    
     private void runProcess(String command) throws Exception {
        Process pro = Runtime.getRuntime().exec(command);
        printLines(command + " stdout:", pro.getInputStream());
        printLines(command + " stderr:", pro.getErrorStream());
        pro.waitFor();
        tbxOutput.append(command + " exitValue() " + pro.exitValue());
      }

    private void printLines(String cmd, InputStream ins) throws Exception {
        String line = null;
        BufferedReader in = new BufferedReader(new InputStreamReader(ins));
        while ((line = in.readLine()) != null) {
            tbxOutput.append(line);
            tbxOutput.append("\n");
        }
     }
    
    private void bttnSaveFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnSaveFileActionPerformed
       JFileChooser fileChooser = new JFileChooser();
		fileChooser.setDialogTitle("Specify a file to save");

		int userSelection = fileChooser.showSaveDialog(this);
		if (userSelection == JFileChooser.APPROVE_OPTION) {
			File fileToSave = fileChooser.getSelectedFile();
                       // fileToSave.
                       
                               try( PrintWriter out = new PrintWriter(fileToSave.toString())  )
                               {
                                   for(String line : txtAreaInput.getText().split("\\n"))
                                    {
                                       out.println(line);
                                    }
                               } catch (FileNotFoundException ex) 
                               {
                                     Logger.getLogger(UserInterface.class.getName()).log(Level.SEVERE, null, ex);
                               }

                       
			JOptionPane.showMessageDialog(null, "Nai-save ng maayos.");
		}
    }//GEN-LAST:event_bttnSaveFileActionPerformed

    private void bttnOpenFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnOpenFileActionPerformed
        // TODO add your handling code here:
        
        txtAreaInput.setText("");
        try
        {
            JFileChooser open = new JFileChooser();
            int option = open.showOpenDialog(this);
             fileToSave = new File(open.getSelectedFile().getPath());
             readFile = new FileReader(fileToSave);
            BufferedReader br = new BufferedReader(readFile);
            String s;
                 while((s=br.readLine())!=null)
                {
                      txtAreaInput.append(s + "\n");
                }
                 //System.out.println(readFile);
            //readFile.close();
        }
        catch(Exception ae)
        {
             System.out.println(ae);
         }
    }//GEN-LAST:event_bttnOpenFileActionPerformed
                                          

    private void runBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runBttnActionPerformed
        tbxOutput.setText("");
        if(fileToSave == null)
        {
            JFileChooser fileChooser = new JFileChooser();
		fileChooser.setDialogTitle("Saving the program before running");

		int userSelection = fileChooser.showSaveDialog(this);
		if (userSelection == JFileChooser.APPROVE_OPTION) {
			 fileToSave = fileChooser.getSelectedFile();
                       
                               try( PrintWriter out = new PrintWriter(fileToSave.toString())  )
                               {
                                        for(String line : txtAreaInput.getText().split("\\n"))
                                        {
                                           out.println(line);
                                        }
                               } catch (FileNotFoundException ex) 
                               {
                                     Logger.getLogger(UserInterface.class.getName()).log(Level.SEVERE, null, ex);
                               }                       
		  JOptionPane.showMessageDialog(null, "Saving And Running The Program");         
                try {      
                    output();
                } catch (IOException ex) {
                    Logger.getLogger(UserInterface.class.getName()).log(Level.SEVERE, null, ex);
                }
        
		}
        }
        else{
            
                try( PrintWriter out = new PrintWriter(fileToSave.toString())  )
                {
                         for(String line : txtAreaInput.getText().split("\\n"))
                         {
                            out.println(line);
                         }
                } catch (FileNotFoundException ex) 
                {
                      Logger.getLogger(UserInterface.class.getName()).log(Level.SEVERE, null, ex);
                }
            try {          
                output();
            } catch (IOException ex) {
                Logger.getLogger(UserInterface.class.getName()).log(Level.SEVERE, null, ex);
            }
             }
    }//GEN-LAST:event_runBttnActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[])throws IOException  {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
       
        
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UserInterface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bttnOpenFile;
    private javax.swing.JButton bttnSaveFile;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton runBttn;
    private javax.swing.JTextArea tbxOutput;
    private javax.swing.JTextArea txtAreaInput;
    // End of variables declaration//GEN-END:variables
}
